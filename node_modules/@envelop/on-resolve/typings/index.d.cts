import { GraphQLResolveInfo } from 'graphql';
import { Plugin, PromiseOrValue } from '@envelop/core';
export declare type Resolver<Context = unknown> = (root: unknown, args: Record<string, unknown>, context: Context, info: GraphQLResolveInfo) => PromiseOrValue<unknown>;
export declare type AfterResolver = (options: {
    result: unknown;
    setResult: (newResult: unknown) => void;
}) => PromiseOrValue<void>;
export interface OnResolveOptions<PluginContext extends Record<string, any> = {}> {
    context: PluginContext;
    root: unknown;
    args: Record<string, unknown>;
    info: GraphQLResolveInfo;
    resolver: Resolver<PluginContext>;
    replaceResolver: (newResolver: Resolver<PluginContext>) => void;
}
export declare type OnResolve<PluginContext extends Record<string, any> = {}> = (options: OnResolveOptions<PluginContext>) => PromiseOrValue<AfterResolver | void>;
/**
 * Wraps the provided schema by hooking into the resolvers of every field.
 *
 * Use the `onResolve` argument to manipulate the resolver and its results/errors.
 */
export declare function useOnResolve<PluginContext extends Record<string, any> = {}>(onResolve: OnResolve<PluginContext>): Plugin<PluginContext>;
