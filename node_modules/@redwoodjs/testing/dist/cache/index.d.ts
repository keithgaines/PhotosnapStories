type AsymmetricMatcher = {
    $$typeof: symbol;
};
type ExpectedValue = Array<any> | any | AsymmetricMatcher;
type ExpectedKey = string | RegExp;
declare global {
    namespace jest {
        interface Matchers<R> {
            /**
             *
             * Use this helper to simplify testing your InMemoryCache client.
             *
             * The expected value you provide will be serialized and deseriliazed for you.
             *
             * NOTE: Does not support partialMatch - use cacheClient.contents or test with a key!
             * @param expectedValue The value that is cached, must be serializable
             */
            toHaveCached(expectedValue: unknown): R;
            /**
             *
             * Use this helper to simplify testing your InMemoryCache client.
             *
             *
             * @param cacheKey They key that your value is cached under
             * @param expectedValue The expected value. Can be a jest asymmetric matcher (using `partialMatch`)
             */
            toHaveCached(cacheKey: ExpectedKey, expectedValue: ExpectedValue): R;
        }
    }
}
/**
 * This is just syntactic sugar, to help with testing cache contents.
 *
 * If you pass an array, it will check arrays for a partial match of the object.
 *
 * If you pass an object, it will check for a partial match of the object.
 *
 * Useful when you don't want to compare dates/auto-generated ids etc.
 *
 * @example
 * expect(testCacheClient.contents).toContainEqual(partialMatch({ title: 'Only look for this title'}))
 *
 * @example
 * expect(testCacheClient.contents).toContainEqual(partialMatch([{id: 1}, {id: 2}]))
 *
 * @param value Object or Array of object to match
 */
export declare const partialMatch: (value: Record<any, any> | Array<Record<any, any>>) => any;
export {};
//# sourceMappingURL=index.d.ts.map