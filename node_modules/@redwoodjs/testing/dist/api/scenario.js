"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.defineScenario = void 0;
/**
 * Use this function to define your scenario.
 * @example
 * export const standard = defineScenario({
 user: {
   dom: {
     name: 'Dom Saadi',
     email: 'dom@redwoodjs.com'
    }
  },
})
/* @example
* export const standard = defineScenario<Prisma.CreateUserArgs>({
 user: {
   dom: {
     name: 'Dom Saadi',
     email: 'dom@redwoodjs.com'
    }
  },
})
*/
const defineScenario = data => {
  return data;
};

/**
 * @example {
 *  dannyUser: {data :{
 *   id: 1,
 *  name: 'Danny',}
 * }}
 *
 * @example
 *  krisUser: (scenario) => {
 *  return {
 *    data: {
 *      id: 2,
 *      name: 'Kris',
 *    }
 *  }
 * }
 */

// -----
// The types below are used to provide global types for scenario and defineScenario, used in testing
// ---

// Note that the generic is **inside** the interface
// This is so we can assign it to a const when we generate scenarios.d.ts

// defineScenario({
//   modelName: ScenarioDefinitionMap
// })

/**
 * Type of data seeded by the scenario. Use this type to get the 'strict' return type of defineScenario
 *
 * @example
 * import { Product } from '@prisma/client'
 *
 * // If you scenario looks like this:
 * * export const standard = defineScenario({
 *    product: {
 *    shirt: {
 *      id: 55,
 *      price: 10
 *    }
 * })
 *
 * // Export the StandardScenario type as
 * export StandardScenario = ScenarioSeed<Product, 'product'>
 *
 * // You can also define each of the keys in your scenario, so you get stricter type checking
 * export StandardScenario = ScenarioSeed<Product, 'product', 'shirt'>
 *
 */

// Overload scenario function for namedScenario
exports.defineScenario = defineScenario;