"use strict";

var _context2;
var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js/instance/for-each");
var _Object$keys = require("@babel/runtime-corejs3/core-js/object/keys");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  useAuth: true,
  createAuthentication: true
};
exports.createAuthentication = void 0;
exports.useAuth = useAuth;
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/is-array"));
var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _react = _interopRequireDefault(require("react"));
var _index = require("@redwoodjs/auth/dist/index");
_forEachInstanceProperty(_context2 = _Object$keys(_index)).call(_context2, function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  _Object$defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});
var _mockRequests = require("./mockRequests");
// Exporting everything here, but exports further down in this file will
// override exports with the same name
const AuthProvider = ({
  children
}) => {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
};
function makeArray(input) {
  return !input ? [] : (0, _isArray.default)(input) ? input : [input];
}

// When running jest tests, this is what they'll get when they import `useAuth`
// thanks to some magic we do in jest-preset.js
function useAuth() {
  return {
    loading: false,
    isAuthenticated: !!_mockRequests.mockedUserMeta.currentUser,
    logIn: async () => {},
    logOut: async () => {},
    signUp: async () => {},
    currentUser: _mockRequests.mockedUserMeta.currentUser,
    userMetadata: _mockRequests.mockedUserMeta.currentUser,
    getToken: async () => null,
    getCurrentUser: async () => _mockRequests.mockedUserMeta.currentUser,
    hasRole: roles => {
      const currentUserRoles = makeArray(_mockRequests.mockedUserMeta.currentUser?.roles);
      if (currentUserRoles) {
        var _context;
        return (0, _some.default)(_context = makeArray(roles)).call(_context, role => (0, _includes.default)(currentUserRoles).call(currentUserRoles, role));
      }
      return false;
    },
    reauthenticate: async () => {},
    forgotPassword: async () => {},
    resetPassword: async () => {},
    validateResetToken: async () => {},
    type: 'default',
    client: undefined,
    hasError: false
  };
}
const createAuthentication = () => {
  return {
    AuthProvider,
    useAuth
  };
};
exports.createAuthentication = createAuthentication;