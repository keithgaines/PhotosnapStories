"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.MockProviders = void 0;
var _react = _interopRequireDefault(require("react"));
var _auth = require("@redwoodjs/auth");
var _router = require("@redwoodjs/router");
var _web = require("@redwoodjs/web");
var _apollo = require("@redwoodjs/web/apollo");
var _MockParamsProvider = require("./MockParamsProvider");
/**
 * NOTE: This module should not contain any nodejs functionality,
 * because it's also used by Storybook in the browser.
 */

// @ts-expect-error - We inject useAuth when testing, so it will be available

// Import the user's Router from `./web/src/Router.{tsx,js}`,
// we pass the `children` from the user's Router to `./MockRouter.Router`
// so that we can populate the `routes object` in Storybook and tests.
const {
  default: UserRouterWithRoutes
} = require('~__REDWOOD__USER_ROUTES_FOR_MOCK');

// TODO(pc): see if there are props we want to allow to be passed into our mock provider (e.g. AuthProviderProps)
const MockProviders = ({
  children
}) => {
  return /*#__PURE__*/_react.default.createElement(_web.RedwoodProvider, {
    titleTemplate: "%PageTitle | %AppTitle"
  }, /*#__PURE__*/_react.default.createElement(_apollo.RedwoodApolloProvider, {
    useAuth: _auth.useAuth
  }, /*#__PURE__*/_react.default.createElement(UserRouterWithRoutes, null), /*#__PURE__*/_react.default.createElement(_router.LocationProvider, null, /*#__PURE__*/_react.default.createElement(_MockParamsProvider.MockParamsProvider, null, children))));
};
exports.MockProviders = MockProviders;