"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfig = exports.TargetEnum = exports.BundlerEnum = void 0;
exports.getRawConfig = getRawConfig;
var _fs = _interopRequireDefault(require("fs"));
var _toml = _interopRequireDefault(require("@iarna/toml"));
var _deepmerge = _interopRequireDefault(require("deepmerge"));
var _stringEnvInterpolation = require("string-env-interpolation");
var _configPath = require("./configPath");
let TargetEnum = /*#__PURE__*/function (TargetEnum) {
  TargetEnum["NODE"] = "node";
  TargetEnum["BROWSER"] = "browser";
  TargetEnum["REACT_NATIVE"] = "react-native";
  TargetEnum["ELECTRON"] = "electron";
  return TargetEnum;
}({});
exports.TargetEnum = TargetEnum;
let BundlerEnum = /*#__PURE__*/function (BundlerEnum) {
  BundlerEnum["WEBPACK"] = "webpack";
  BundlerEnum["VITE"] = "vite";
  return BundlerEnum;
}({});
exports.BundlerEnum = BundlerEnum;
// Note that web's includeEnvironmentVariables is handled in `webpack.common.js`
// https://github.com/redwoodjs/redwood/blob/d51ade08118c17459cebcdb496197ea52485364a/packages/core/config/webpack.common.js#L19
const DEFAULT_CONFIG = {
  web: {
    title: 'Redwood App',
    host: 'localhost',
    port: 8910,
    path: './web',
    target: TargetEnum.BROWSER,
    bundler: BundlerEnum.WEBPACK,
    includeEnvironmentVariables: [],
    apiUrl: '/.redwood/functions',
    fastRefresh: true,
    a11y: true,
    sourceMap: false
  },
  api: {
    title: 'Redwood App',
    host: 'localhost',
    port: 8911,
    path: './api',
    target: TargetEnum.NODE,
    schemaPath: './api/db/schema.prisma',
    serverConfig: './api/server.config.js',
    debugPort: 18911
  },
  browser: {
    open: false
  },
  generate: {
    tests: true,
    stories: true,
    nestScaffoldByModel: true
  },
  notifications: {
    versionUpdates: []
  },
  experimental: {
    opentelemetry: {
      enabled: false,
      apiSdk: undefined
    },
    studio: {
      inMemory: false,
      graphiql: {
        endpoint: 'graphql',
        authImpersonation: {
          authProvider: undefined,
          userId: undefined,
          email: undefined,
          roles: undefined,
          jwtSecret: 'secret'
        }
      }
    }
  }
};

/**
 * These configuration options are modified by the user via the Redwood
 * config file.
 */
const getConfig = (configPath = (0, _configPath.getConfigPath)()) => {
  try {
    return (0, _deepmerge.default)(DEFAULT_CONFIG, getRawConfig(configPath));
  } catch (e) {
    throw new Error(`Could not parse "${configPath}": ${e}`);
  }
};

/**
 * Returns the JSON parse of the config file without any default values.
 *
 * @param configPath Path to the config file, defaults to automatically find the project `redwood.toml` file
 * @returns A JSON object from the parsed toml values
 */
exports.getConfig = getConfig;
function getRawConfig(configPath = (0, _configPath.getConfigPath)()) {
  try {
    return _toml.default.parse((0, _stringEnvInterpolation.env)(_fs.default.readFileSync(configPath, 'utf8')));
  } catch (e) {
    throw new Error(`Could not parse "${configPath}": ${e}`);
  }
}