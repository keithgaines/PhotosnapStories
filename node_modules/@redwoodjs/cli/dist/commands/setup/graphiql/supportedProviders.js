"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.supportedProviders = void 0;
var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/parse-int"));
var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/date/now"));
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));
var _cryptoJs = _interopRequireDefault(require("crypto-js"));
var _uuid = require("uuid");
// tests if id, which is always a string from cli, is actually a number or uuid
const isNumeric = id => {
  return /^\d+$/.test((0, _parseInt2.default)(id));
};
const getExpiryTime = expiry => {
  return expiry ? (0, _now.default)() + expiry * 60 * 1000 : (0, _now.default)() + 3600 * 1000;
};
const getDBAuthHeader = userId => {
  if (!userId) {
    throw new Error('Require an unique id to generate session cookie');
  }
  if (!process.env.SESSION_SECRET) {
    throw new Error('dbAuth requires a SESSION_SECRET environment variable that is used to encrypt session cookies. Use `yarn rw g secret` to create one, then add to your `.env` file. DO NOT check this variable in your version control system!!');
  }
  const id = isNumeric(userId) ? (0, _parseInt2.default)(userId) : userId;
  const cookie = _cryptoJs.default.AES.encrypt((0, _stringify.default)({
    id
  }) + ';' + (0, _uuid.v4)(), process.env.SESSION_SECRET).toString();
  return {
    'auth-provider': 'dbAuth',
    cookie: `session=${cookie}`,
    authorization: `Bearer ${id}`
  };
};
const getSupabasePayload = (id, expiry) => {
  if (!process.env.SUPABASE_JWT_SECRET) {
    throw new Error('SUPABASE_JWT_SECRET env var is not set.');
  }
  const payload = {
    aud: 'authenticated',
    exp: getExpiryTime(expiry),
    sub: id ?? 'test-user-id',
    email: 'user@example.com',
    app_metadata: {
      provider: 'email'
    },
    user_metadata: {},
    role: 'authenticated',
    roles: []
  };
  return payload;
};
const getNetlifyPayload = (id, expiry) => {
  const payload = {
    exp: getExpiryTime(expiry),
    sub: id ?? 'test-user-id',
    email: 'user@example.com',
    app_metadata: {
      provider: 'email',
      authorization: {
        roles: []
      }
    },
    user_metadata: {}
  };
  return payload;
};
const supportedProviders = {
  dbAuth: {
    getPayload: getDBAuthHeader,
    env: ''
  },
  supabase: {
    getPayload: getSupabasePayload,
    env: 'process.env.SUPABASE_JWT_SECRET'
  },
  // no access to netlify JWT private key in dev.
  netlify: {
    getPayload: getNetlifyPayload,
    env: '"secret-123"'
  }
};
exports.supportedProviders = supportedProviders;