"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = void 0;
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));
var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/date/now"));
var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/interopRequireWildcard"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _execa = _interopRequireDefault(require("execa"));
var _listr = require("listr2");
var _api = require("@redwoodjs/internal/dist/build/babel/api");
var _telemetry = require("@redwoodjs/telemetry");
var _lib = require("../../../lib");
var _colors = _interopRequireDefault(require("../../../lib/colors"));
var _project = require("../../../lib/project");
var _graphiqlHelpers = require("./graphiqlHelpers");
var _supportedProviders = require("./supportedProviders");
const addHeaderOption = () => {
  const graphqlPath = (0, _lib.getGraphqlPath)();
  let content = (0, _lib.readFile)(graphqlPath).toString();
  const [_, hasHeaderImport] = content.match(/(import .* from 'src\/lib\/generateGraphiQLHeader.*')/s) || [];
  if (!hasHeaderImport) {
    // add header import statement
    content = content.replace(/^(.*services.*)$/m, `$1\n\nimport generateGraphiQLHeader from 'src/lib/generateGraphiQLHeader'`);
    // add object to handler
    content = content.replace(/^(\s*)(loggerConfig:)(.*)$/m, `$1generateGraphiQLHeader,\n$1$2$3`);
    _fs.default.writeFileSync(graphqlPath, content);
  }
};
const printHeaders = async () => {
  // Import babel settings so we can write es6 scripts
  (0, _api.registerApiSideBabelHook)();
  const srcPath = (0, _graphiqlHelpers.getOutputPath)();
  if (!(0, _lib.existsAnyExtensionSync)(srcPath) && `File doesn't exist`) {
    throw new Error('Must run yarn rw setup graphiql <provider> to generate headers before viewing');
  }
  const script = await (specifier => new _promise.default(r => r(`${specifier}`)).then(s => (0, _interopRequireWildcard2.default)(require(s))))(srcPath);
  await script.default();
};
const handler = async ({
  provider,
  id,
  token,
  expiry,
  view
}) => {
  var _context;
  let payload;
  const tasks = new _listr.Listr((0, _filter.default)(_context = [{
    title: 'Generating graphiql header...',
    task: () => {
      payload = (0, _graphiqlHelpers.generatePayload)(provider, id, token, expiry);
    }
  }, {
    title: 'Generating file in src/lib/generateGraphiQLHeader.{js,ts}...',
    task: () => {
      const fileName = token || provider === 'dbAuth' ? 'graphiql-token.ts.template' : 'graphiql-mock.ts.template';
      const content = (0, _lib.generateTemplate)(_path.default.join(__dirname, 'templates', fileName), {
        name: 'graphiql',
        payload: (0, _stringify.default)(payload),
        env: _supportedProviders.supportedProviders[provider].env,
        provider,
        expireTime: expiry ? new Date((0, _now.default)() + expiry * 60 * 1000) : new Date((0, _now.default)() + 3600 * 1000)
      });
      const outputPath = (0, _graphiqlHelpers.getOutputPath)();
      return (0, _lib.writeFilesTask)({
        [outputPath]: (0, _project.isTypeScriptProject)() ? content : (0, _lib.transformTSToJS)(outputPath, content)
      }, {
        overwriteExisting: true
      });
    }
  }, {
    title: 'Importing generated headers into createGraphQLHandler',
    task: (ctx, task) => {
      if ((0, _lib.graphFunctionDoesExist)()) {
        addHeaderOption();
      } else {
        task.skip('GraphQL function not found, skipping');
      }
    }
  }, {
    title: 'Installing packages...',
    task: async () => {
      if (!token && provider !== 'dbAuth') {
        await (0, _execa.default)('yarn', ['workspace', 'api', 'add', 'jsonwebtoken']);
      }
    }
  }]).call(_context, Boolean), {
    rendererOptions: {
      collapseSubtasks: false
    }
  });
  try {
    if (view) {
      return await printHeaders();
    }
    await tasks.run();
  } catch (e) {
    (0, _telemetry.errorTelemetry)(process.argv, e.message);
    console.error(_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
exports.handler = handler;