"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = exports.description = exports.command = exports.builder = void 0;
var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/interopRequireWildcard"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));
var _terminalLink = _interopRequireDefault(require("terminal-link"));
var _supportedProviders = require("./supportedProviders");
const command = 'graphiql <provider>';
exports.command = command;
const description = 'Generate GraphiQL headers';
exports.description = description;
const builder = yargs => {
  yargs.positional('provider', {
    choices: (0, _keys.default)(_supportedProviders.supportedProviders),
    description: 'Auth provider used',
    type: 'string'
  }).option('id', {
    alias: 'i',
    description: 'Unique id to identify current user',
    type: 'string'
  }).option('token', {
    alias: 't',
    description: 'Generated JWT token. If not provided, mock JWT payload is provided that can be modified and turned into a token',
    type: 'string'
  }).option('expiry', {
    alias: 'e',
    default: 60,
    description: 'Token expiry in minutes. Default is 60',
    type: 'number'
  }).option('view', {
    alias: 'v',
    default: false,
    description: 'Print out generated headers',
    type: 'boolean'
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/docs/cli-commands#setup-header')}`);
};
exports.builder = builder;
const handler = async options => {
  const {
    handler
  } = await _promise.default.resolve().then(() => (0, _interopRequireWildcard2.default)(require('./graphiqlHandler')));
  return handler(options);
};
exports.handler = handler;