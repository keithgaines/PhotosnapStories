"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.handler = void 0;
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _chalk = _interopRequireDefault(require("chalk"));
var _listr = require("listr2");
var _cliHelpers = require("@redwoodjs/cli-helpers");
var _projectConfig = require("@redwoodjs/project-config");
var _telemetry = require("@redwoodjs/telemetry");
var _lib = require("../../../lib");
var _colors = _interopRequireDefault(require("../../../lib/colors"));
var _project = require("../../../lib/project");
const {
  version
} = JSON.parse(_fs.default.readFileSync(_path.default.resolve(__dirname, '../../../../package.json'), 'utf-8'));
const handler = async ({
  force,
  verbose,
  addPackage
}) => {
  const ts = (0, _project.isTypeScriptProject)();
  const tasks = new _listr.Listr([{
    title: 'Confirmation',
    task: async (_ctx, task) => {
      const confirmation = await task.prompt({
        type: 'Confirm',
        message: 'Vite support is experimental. Continue?'
      });
      if (!confirmation) {
        throw new Error('User aborted');
      }
    }
  }, {
    title: 'Adding vite.config.js...',
    task: () => {
      const viteConfigPath = `${(0, _lib.getPaths)().web.base}/vite.config.${ts ? 'ts' : 'js'}`;
      const templateContent = _fs.default.readFileSync(_path.default.resolve(__dirname, 'templates', 'vite.config.ts.template'), 'utf-8');
      const viteConfigContent = ts ? templateContent : (0, _lib.transformTSToJS)(viteConfigPath, templateContent);
      return (0, _lib.writeFile)(viteConfigPath, viteConfigContent, {
        overwriteExisting: force
      });
    }
  }, {
    title: 'Adding Vite bundler flag to redwood.toml...',
    task: (_ctx, task) => {
      const redwoodTomlPath = (0, _projectConfig.getConfigPath)();
      const configContent = _fs.default.readFileSync(redwoodTomlPath, 'utf-8');
      if (!(0, _includes.default)(configContent).call(configContent, 'bundler = "vite"')) {
        // Use string replace to preserve comments and formatting
        (0, _lib.writeFile)(redwoodTomlPath, configContent.replace('[web]', '[web]\n  bundler = "vite"'), {
          overwriteExisting: true // redwood.toml always exists
        });
      } else {
        task.skip('Vite bundler flag already set in redwood.toml');
      }
    }
  }, {
    title: 'Creating new entry point in `web/src/entry-client.jsx`...',
    task: () => {
      // Keep it as JSX for now
      const entryPointFile = _path.default.join((0, _lib.getPaths)().web.src, `entry-client.jsx`);
      const content = _fs.default.readFileSync(_path.default.join((0, _lib.getPaths)().base,
      // NOTE we're copying over the index.js before babel transform
      'node_modules/@redwoodjs/web/src/entry/index.js'), 'utf-8').replace('~redwood-app-root', './App');
      return (0, _lib.writeFile)(entryPointFile, content, {
        overwriteExisting: force
      });
    }
  }, {
    ...(0, _cliHelpers.addWebPackages)([`@redwoodjs/vite@${version}`]),
    title: 'Adding @redwoodjs/vite dependency...',
    skip: () => {
      if (!addPackage) {
        return 'Skipping package install, you will need to add @redwoodjs/vite manaually as a dependency on the web workspace';
      }
    }
  }, {
    title: 'One more thing...',
    task: (_ctx, task) => {
      task.title = `One more thing...\n
          ${_colors.default.green('Vite Support is still experimental!')}
          ${_colors.default.green('Please let us know if you find bugs or quirks.')}
          ${_chalk.default.hex('#e8e8e8')('https://github.com/redwoodjs/redwood/issues/new')}
        `;
    }
  }], {
    rendererOptions: {
      collapseSubtasks: false
    },
    renderer: verbose ? 'verbose' : 'default'
  });
  try {
    await tasks.run();
  } catch (e) {
    (0, _telemetry.errorTelemetry)(process.argv, e.message);
    console.error(_colors.default.error(e.message));
    process.exit(e?.exitCode || 1);
  }
};
exports.handler = handler;