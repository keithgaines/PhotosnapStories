#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _dotenvDefaults = require("dotenv-defaults");
var _findupSync = _interopRequireDefault(require("findup-sync"));
var _helpers = require("yargs/helpers");
var _yargs = _interopRequireDefault(require("yargs/yargs"));
var _telemetry = require("@redwoodjs/telemetry");
var buildCommand = _interopRequireWildcard(require("./commands/build"));
var checkCommand = _interopRequireWildcard(require("./commands/check"));
var consoleCommand = _interopRequireWildcard(require("./commands/console"));
var dataMigrateCommand = _interopRequireWildcard(require("./commands/data-migrate"));
var deployCommand = _interopRequireWildcard(require("./commands/deploy"));
var destroyCommand = _interopRequireWildcard(require("./commands/destroy"));
var devCommand = _interopRequireWildcard(require("./commands/dev"));
var execCommand = _interopRequireWildcard(require("./commands/exec"));
var experimentalCommand = _interopRequireWildcard(require("./commands/experimental"));
var generateCommand = _interopRequireWildcard(require("./commands/generate"));
var infoCommand = _interopRequireWildcard(require("./commands/info"));
var lintCommand = _interopRequireWildcard(require("./commands/lint"));
var prerenderCommand = _interopRequireWildcard(require("./commands/prerender"));
var prismaCommand = _interopRequireWildcard(require("./commands/prisma"));
var recordCommand = _interopRequireWildcard(require("./commands/record"));
var serveCommand = _interopRequireWildcard(require("./commands/serve"));
var setupCommand = _interopRequireWildcard(require("./commands/setup"));
var storybookCommand = _interopRequireWildcard(require("./commands/storybook"));
var testCommand = _interopRequireWildcard(require("./commands/test"));
var tstojsCommand = _interopRequireWildcard(require("./commands/ts-to-js"));
var typeCheckCommand = _interopRequireWildcard(require("./commands/type-check"));
var upgradeCommand = _interopRequireWildcard(require("./commands/upgrade"));
var _lib = require("./lib");
var updateCheck = _interopRequireWildcard(require("./lib/updateCheck"));
var _context;
// # Setting the CWD
//
// The current working directory can be set via:
//
// 1. The `--cwd` option
// 2. The `RWJS_CWD` env-var
// 3. By traversing directories upwards for the first `redwood.toml`
//
// ## Examples
//
// ```
// yarn rw info --cwd /path/to/project
// RWJS_CWD=/path/to/project yarn rw info
//
// # In this case, `--cwd` wins out over `RWJS_CWD`
// RWJS_CWD=/path/to/project yarn rw info --cwd /path/to/other/project
//
// # Here we traverses upwards for a redwood.toml.
// cd api
// yarn rw info
// ```
let {
  cwd
} = (0, _helpers.Parser)((0, _helpers.hideBin)(process.argv));
cwd ??= process.env.RWJS_CWD;
try {
  if (cwd) {
    // `cwd` was set by the `--cwd` option or the `RWJS_CWD` env var. In this case,
    // we don't want to find up for a `redwood.toml` file. The `redwood.toml` should just be in that directory.
    if (!_fs.default.existsSync(_path.default.join(cwd, 'redwood.toml'))) {
      throw new Error(`Couldn't find a "redwood.toml" file in ${cwd}`);
    }
  } else {
    // `cwd` wasn't set. Odds are they're in a Redwood project,
    // but they could be in ./api or ./web, so we have to find up to be sure.

    const redwoodTOMLPath = (0, _findupSync.default)('redwood.toml', {
      cwd: process.cwd()
    });
    if (!redwoodTOMLPath) {
      throw new Error(`Couldn't find up a "redwood.toml" file from ${process.cwd()}`);
    }
    cwd = _path.default.dirname(redwoodTOMLPath);
  }
} catch (error) {
  console.error(error.message);
  process.exit(1);
}
process.env.RWJS_CWD = cwd;

// # Load .env, .env.defaults
//
// This should be done as early as possible, and the earliest we can do it is after setting `cwd`.

(0, _dotenvDefaults.config)({
  path: _path.default.join((0, _lib.getPaths)().base, '.env'),
  defaults: _path.default.join((0, _lib.getPaths)().base, '.env.defaults'),
  multiline: true
});

// # Build the CLI and run it
(0, _yargs.default)((0, _helpers.hideBin)(process.argv))
// Config
.scriptName('rw').middleware((0, _filter.default)(_context = [
// We've already handled `cwd` above, but it may still be in `argv`.
// We don't need it anymore so let's get rid of it.
argv => {
  delete argv.cwd;
}, _telemetry.telemetryMiddleware, updateCheck.isEnabled() && updateCheck.updateCheckMiddleware]).call(_context, Boolean)).option('cwd', {
  describe: 'Working directory to use (where `redwood.toml` is located)'
}).example('yarn rw g page home /', "\"Create a page component named 'Home' at path '/'\"").demandCommand().strict()

// Commands
.command(buildCommand).command(checkCommand).command(consoleCommand).command(dataMigrateCommand).command(deployCommand).command(destroyCommand).command(devCommand).command(execCommand).command(experimentalCommand).command(generateCommand).command(infoCommand).command(lintCommand).command(prerenderCommand).command(prismaCommand).command(recordCommand).command(serveCommand).command(setupCommand).command(storybookCommand).command(testCommand).command(tstojsCommand).command(typeCheckCommand).command(upgradeCommand)

// Run
.parse();