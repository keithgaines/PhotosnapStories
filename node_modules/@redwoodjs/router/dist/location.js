"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.useLocation = exports.LocationProvider = exports.LocationContext = void 0;
var _endsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/ends-with"));
var _react = _interopRequireDefault(require("react"));
var _history = require("./history");
var _util = require("./util");
const LocationContext = (0, _util.createNamedContext)('Location');
exports.LocationContext = LocationContext;
class LocationProvider extends _react.default.Component {
  constructor() {
    super(...arguments);
    this.HISTORY_LISTENER_ID = undefined;
    this.state = {
      context: this.getContext()
    };
  } // When prerendering, there might be more than one level of location
  // providers. Use the values from the one above.
  getContext() {
    let windowLocation;
    if (typeof window !== 'undefined') {
      const {
        pathname
      } = window.location;

      // Since we have to update the URL, we might as well handle the trailing
      // slash here, before matching.
      //
      // - never -> strip trailing slashes ("/about/" -> "/about")
      // - always -> add trailing slashes ("/about" -> "/about/")
      // - preserve -> do nothing ("/about" -> "/about", "/about/" -> "/about/")
      //
      switch (this.props.trailingSlashes) {
        case 'never':
          if ((0, _endsWith.default)(pathname).call(pathname, '/')) {
            window.history.replaceState({}, '', pathname.substr(0, pathname.length - 1));
          }
          break;
        case 'always':
          if (!(0, _endsWith.default)(pathname).call(pathname, '/')) {
            window.history.replaceState({}, '', pathname + '/');
          }
          break;
        default:
          break;
      }
      windowLocation = window.location;
    } else {
      windowLocation = {
        pathname: this.context?.pathname || '',
        search: this.context?.search || '',
        hash: this.context?.hash || ''
      };
    }
    const {
      pathname,
      search,
      hash
    } = this.props.location || windowLocation;
    return {
      pathname,
      search,
      hash
    };
  }
  componentDidMount() {
    this.HISTORY_LISTENER_ID = _history.gHistory.listen(() => {
      this.setState(() => ({
        context: this.getContext()
      }));
    });
  }
  componentWillUnmount() {
    if (this.HISTORY_LISTENER_ID) {
      _history.gHistory.remove(this.HISTORY_LISTENER_ID);
    }
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(LocationContext.Provider, {
      value: this.state.context
    }, this.props.children);
  }
}
exports.LocationProvider = LocationProvider;
LocationProvider.contextType = LocationContext;
const useLocation = () => {
  const location = _react.default.useContext(LocationContext);
  if (location === undefined) {
    throw new Error('useLocation must be used within a LocationProvider');
  }
  return location;
};
exports.useLocation = useLocation;