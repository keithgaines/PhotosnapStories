"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.useFetchConfig = exports.getApiGraphQLUrl = exports.FetchConfigProvider = exports.FetchConfigContext = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/extends"));
var _globalThis2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/global-this"));
var _react = _interopRequireDefault(require("react"));
var _auth = require("@redwoodjs/auth");
const getApiGraphQLUrl = () => {
  return _globalThis2.default.RWJS_API_GRAPHQL_URL;
};
exports.getApiGraphQLUrl = getApiGraphQLUrl;
const FetchConfigContext = /*#__PURE__*/_react.default.createContext({
  uri: getApiGraphQLUrl()
});
exports.FetchConfigContext = FetchConfigContext;
/**
 * The `FetchConfigProvider` understands Redwood's Auth and determines the
 * correct request-headers based on a user's authentication state.
 * Note that the auth bearer token is now passed in packages/web/src/apollo/index.tsx
 * as the token is retrieved async
 */
const FetchConfigProvider = _ref => {
  let {
    useAuth = _auth.useNoAuth,
    ...rest
  } = _ref;
  const {
    isAuthenticated,
    type
  } = useAuth();
  if (!isAuthenticated) {
    return /*#__PURE__*/_react.default.createElement(FetchConfigContext.Provider, (0, _extends2.default)({
      value: {
        uri: getApiGraphQLUrl()
      }
    }, rest));
  }
  return /*#__PURE__*/_react.default.createElement(FetchConfigContext.Provider, (0, _extends2.default)({
    value: {
      uri: getApiGraphQLUrl(),
      headers: {
        'auth-provider': type
      }
    }
  }, rest));
};
exports.FetchConfigProvider = FetchConfigProvider;
const useFetchConfig = () => _react.default.useContext(FetchConfigContext);
exports.useFetchConfig = useFetchConfig;