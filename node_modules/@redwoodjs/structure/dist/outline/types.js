"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.Icon = void 0;
exports.outlineToJSON = outlineToJSON;
var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/promise"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));
let Icon = /*#__PURE__*/function (Icon) {
  Icon["redwood"] = "redwood";
  Icon["page"] = "page";
  Icon["page_private"] = "page_private";
  Icon["pages"] = "pages";
  Icon["layouts"] = "layouts";
  Icon["netlify"] = "netlify";
  Icon["prisma"] = "prisma";
  Icon["storybook"] = "storybook";
  Icon["services"] = "services";
  Icon["graphql"] = "graphql";
  Icon["play"] = "play";
  Icon["components"] = "components";
  Icon["rw_cli"] = "rw_cli";
  Icon["functions"] = "functions";
  Icon["cells"] = "cells";
  Icon["model"] = "model";
  return Icon;
}({});
/**
 * A link/action to execute when an outline item is clicked.
 * It can be:
 * - a file URL (with optional position hash)
 *   - ex: "file:///somefile.ts"
 *   - ex: "file:///Users/foo/bar/project/myfile.js#3:10"
 *   - the editor will open and focus on this document when the item is selected
 *   - note: a "file://" URL can only be associalted to ONE item in the outline
 *     (so vscode can do a reverse search).
 * - an HTTP URL
 *   - ex: "http://localhost:9999/foo/bar"
 *   - ex: "http://redwoodjs.com/"
 *   - the URL will open in the default browser when this item is selected
 * - a redwood CLI action
 *   - ex: "rw generate page"
 *   - note: the string must start with "rw"
 *   - the command will be executed when this item is selected
 * - an interactive redwood action
 *   - ex: "rw generate page..."
 *   - the string must start with end with "..." (this means interactive)
 *   - the interactive process will start when this item is selected
 *   - not all redwood commands are supported in interactive mode
 *   - see: https://github.com/redwoodjs/redwood/tree/main/packages/structure/src/interactive_cli
 */
exports.Icon = Icon;
/**
 * this will recursively await all children and return a serializable representation
 * of the complete outline
 * @param item
 */
async function outlineToJSON(item) {
  if (!item.children) {
    return {
      ...item,
      children: undefined
    };
  }
  const cs = item.children ? await item.children() : [];
  const css = await _promise.default.all((0, _map.default)(cs).call(cs, outlineToJSON));
  return {
    ...item,
    children: css
  };
}