"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.useRedwoodError = void 0;
var _graphqlYoga = require("graphql-yoga");
var _api = require("@redwoodjs/api");
/**
 * Converts RedwoodErrors to GraphQLErrors
 *
 * This is a workaround for the fact that graphql-yoga doesn't support custom error types.
 *
 * Yoga automatically masks unexpected errors and prevents leaking sensitive information to clients.
 *
 * Since RedwoodErrors (such as ServiceValidation errors) are expected,
 * we need to convert them to GraphQLErrors so that they are not masked.
 *
 * See: https://the-guild.dev/graphql/yoga-server/docs/features/error-masking
 *
 * @param logger
 * @returns ExecutionResult
 */
const useRedwoodError = logger => {
  return {
    async onExecute() {
      return {
        onExecuteDone(payload) {
          return (0, _graphqlYoga.handleStreamOrSingleExecutionResult)(payload, ({
            result,
            setResult
          }) => {
            const errors = result.errors?.map(error => {
              if (error.originalError && error.originalError instanceof _api.RedwoodError) {
                logger.debug({
                  custom: {
                    name: error.originalError.name
                  }
                }, 'Converting RedwoodError to GraphQLError');
                return (0, _graphqlYoga.createGraphQLError)(error.message, {
                  extensions: error.extensions,
                  originalError: error
                });
              } else {
                return error;
              }
            });
            setResult({
              data: result.data,
              errors,
              extensions: result.extensions || {}
            });
          });
        }
      };
    }
  };
};
exports.useRedwoodError = useRedwoodError;