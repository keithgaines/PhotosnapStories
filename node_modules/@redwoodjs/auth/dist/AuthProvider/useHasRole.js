"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.useHasRole = void 0;
var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/is-array"));
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));
var _react = require("react");
const useHasRole = currentUser => {
  /**
   * @example
   * ```js
   *  hasRole("editor")
   *  hasRole(["editor"])
   *  hasRole(["editor", "author"])
   * ```
   *
   * Checks if the "currentUser" from the api side
   * is assigned a role or one of a list of roles.
   * If the user is assigned any of the provided list of roles,
   * the hasRole is considered to be true.
   */
  return (0, _react.useCallback)(rolesToCheck => {
    if (currentUser?.roles) {
      if (typeof rolesToCheck === 'string') {
        if (typeof currentUser.roles === 'string') {
          // rolesToCheck is a string, currentUser.roles is a string
          return currentUser.roles === rolesToCheck;
        } else if ((0, _isArray.default)(currentUser.roles)) {
          // rolesToCheck is a string, currentUser.roles is an array
          return currentUser.roles?.some(allowedRole => rolesToCheck === allowedRole);
        }
      }
      if ((0, _isArray.default)(rolesToCheck)) {
        if ((0, _isArray.default)(currentUser.roles)) {
          // rolesToCheck is an array, currentUser.roles is an array
          return currentUser.roles?.some(allowedRole => (0, _includes.default)(rolesToCheck).call(rolesToCheck, allowedRole));
        } else if (typeof currentUser.roles === 'string') {
          // rolesToCheck is an array, currentUser.roles is a string
          return (0, _some.default)(rolesToCheck).call(rolesToCheck, allowedRole => currentUser?.roles === allowedRole);
        }
      }
    }
    return false;
  }, [currentUser]);
};
exports.useHasRole = useHasRole;