/// <reference types="react" />
import type { AuthImplementation } from '../AuthImplementation';
import { AuthProviderState } from './AuthProviderState';
import { useCurrentUser } from './useCurrentUser';
export declare const useLogIn: <TUser, TRestoreAuth, TLogInOptions, TLogIn, TLogOutOptions, TLogOut, TSignUpOptions, TSignUp, TForgotPassword, TResetPasswordOptions, TResetPassword, TValidateResetToken, TClient>(authImplementation: AuthImplementation<TUser, TRestoreAuth, TLogInOptions, TLogIn, TLogOutOptions, TLogOut, TSignUpOptions, TSignUp, TForgotPassword, TResetPasswordOptions, TResetPassword, TValidateResetToken, TClient>, setAuthProviderState: import("react").Dispatch<import("react").SetStateAction<AuthProviderState<TUser>>>, getCurrentUser: ReturnType<typeof useCurrentUser>, skipFetchCurrentUser: boolean | undefined) => (options?: TLogInOptions | undefined) => Promise<TLogIn>;
//# sourceMappingURL=useLogIn.d.ts.map