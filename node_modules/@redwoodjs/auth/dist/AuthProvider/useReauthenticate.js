"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.useReauthenticate = void 0;
var _react = require("react");
var _useToken = require("./useToken");
const notAuthenticatedState = {
  isAuthenticated: false,
  currentUser: null,
  userMetadata: null,
  loading: false,
  hasError: false
};
const useReauthenticate = (authImplementation, setAuthProviderState, getCurrentUser, skipFetchCurrentUser) => {
  const getToken = (0, _useToken.useToken)(authImplementation);
  return (0, _react.useCallback)(async () => {
    // Setting `loading` to `true` in the AuthProvider's state causes Set components to render their `whileLoadingAuthProp`,
    // so it has to be used a bit carefully. But having a stale auth state can be worse, mainly in Clerk's case.
    // It results in infinite redirects since Clerk thinks the user is authenticated, but the Router thinks otherwise.
    // So Redwood's Clerk integration sets `loadWhileReauthenticating` to true. We may migrate more auth providers over in the future,
    // but right now there's no known issues with them.
    if (authImplementation.loadWhileReauthenticating) {
      setAuthProviderState(oldState => ({
        ...oldState,
        loading: true
      }));
    }
    try {
      const userMetadata = await authImplementation.getUserMetadata();
      if (!userMetadata) {
        let loading = false;
        if (authImplementation.clientHasLoaded) {
          loading = !authImplementation.clientHasLoaded();
        }
        setAuthProviderState({
          ...notAuthenticatedState,
          loading,
          client: authImplementation.client
        });
      } else {
        await getToken();
        const currentUser = skipFetchCurrentUser ? null : await getCurrentUser();
        setAuthProviderState(oldState => ({
          ...oldState,
          userMetadata,
          currentUser,
          isAuthenticated: true,
          loading: false,
          client: authImplementation.client
        }));
      }
    } catch (e) {
      setAuthProviderState({
        ...notAuthenticatedState,
        hasError: true,
        error: e
      });
    }
  }, [authImplementation, getToken, setAuthProviderState, skipFetchCurrentUser, getCurrentUser]);
};
exports.useReauthenticate = useReauthenticate;