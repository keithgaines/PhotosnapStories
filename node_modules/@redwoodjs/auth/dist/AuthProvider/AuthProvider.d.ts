import React, { ReactNode } from 'react';
import { AuthContextInterface, CurrentUser } from '../AuthContext';
import type { AuthImplementation } from '../AuthImplementation';
export interface AuthProviderProps {
    skipFetchCurrentUser?: boolean;
    children: ReactNode;
}
export declare function createAuthProvider<TUser, TRestoreAuth, TLogInOptions, TLogIn, TLogOutOptions, TLogOut, TSignUpOptions, TSignUp, TForgotPassword, TResetPasswordOptions, TResetPassword, TValidateResetToken, TClient>(AuthContext: React.Context<AuthContextInterface<TUser, TLogInOptions, TLogIn, TLogOutOptions, TLogOut, TSignUpOptions, TSignUp, TForgotPassword, TResetPasswordOptions, TResetPassword, TValidateResetToken, TClient> | undefined>, authImplementation: AuthImplementation<TUser, TRestoreAuth, TLogInOptions, TLogIn, TLogOutOptions, TLogOut, TSignUpOptions, TSignUp, TForgotPassword, TResetPasswordOptions, TResetPassword, TValidateResetToken, TClient>, customProviderHooks?: {
    useCurrentUser?: () => Promise<CurrentUser>;
    useHasRole?: (currentUser: CurrentUser | null) => (rolesToCheck: string | string[]) => boolean;
}): ({ children, skipFetchCurrentUser, }: AuthProviderProps) => JSX.Element;
//# sourceMappingURL=AuthProvider.d.ts.map