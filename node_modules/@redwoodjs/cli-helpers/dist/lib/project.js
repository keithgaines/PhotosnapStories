"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.isTypeScriptProject = exports.graphFunctionDoesExist = exports.getInstalledRedwoodVersion = exports.getGraphqlPath = exports.addEnvVarTask = void 0;
var _flat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/flat"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _colors = require("./colors");
var _paths = require("./paths");
const getGraphqlPath = () => {
  return (0, _paths.resolveFile)(_path.default.join((0, _paths.getPaths)().api.functions, 'graphql'));
};
exports.getGraphqlPath = getGraphqlPath;
const graphFunctionDoesExist = () => {
  const graphqlPath = getGraphqlPath();
  return graphqlPath && _fs.default.existsSync(graphqlPath);
};
exports.graphFunctionDoesExist = graphFunctionDoesExist;
const isTypeScriptProject = () => {
  const paths = (0, _paths.getPaths)();
  return _fs.default.existsSync(_path.default.join(paths.web.base, 'tsconfig.json')) || _fs.default.existsSync(_path.default.join(paths.api.base, 'tsconfig.json'));
};
exports.isTypeScriptProject = isTypeScriptProject;
const getInstalledRedwoodVersion = () => {
  try {
    const packageJson = require('../../package.json');
    return packageJson.version;
  } catch (e) {
    console.error(_colors.colors.error('Could not find installed redwood version'));
    process.exit(1);
  }
};
exports.getInstalledRedwoodVersion = getInstalledRedwoodVersion;
const addEnvVarTask = (name, value, comment) => {
  return {
    title: `Adding ${name} var to .env...`,
    task: () => {
      var _context;
      const envPath = _path.default.join((0, _paths.getPaths)().base, '.env');
      const content = (0, _flat.default)(_context = [comment && `# ${comment}`, `${name}=${value}`, '']).call(_context);
      let envFile = '';
      if (_fs.default.existsSync(envPath)) {
        envFile = _fs.default.readFileSync(envPath).toString() + '\n';
      }
      _fs.default.writeFileSync(envPath, envFile + content.join('\n'));
    }
  };
};
exports.addEnvVarTask = addEnvVarTask;