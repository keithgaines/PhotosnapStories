"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.apiSideFiles = void 0;
exports.generateUniqueFileNames = generateUniqueFileNames;
var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reduce"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _at = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/at"));
var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/slice"));
var _reverse = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/reverse"));
var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));
var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));
var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _pascalcase = _interopRequireDefault(require("pascalcase"));
var _lib = require("../lib");
var _paths = require("../lib/paths");
var _project = require("../lib/project");
/**
 * Get the api side file paths and file contents to write
 *
 * Example return value:
 * ```json
 * {
 *   "/Users/tobbe/dev/rw-app/api/src/lib/auth.ts": "<file content>",
 *   "/Users/tobbe/dev/rw-app/api/src/lib/helperFunctions.ts": "<file content>",
 *   "/Users/tobbe/dev/rw-app/api/src/functions/auth.ts": "<file content>"
 * }
 * ```
 */
const apiSideFiles = ({
  basedir,
  webAuthn
}) => {
  const apiSrcPath = (0, _paths.getPaths)().api.src;
  const apiBaseTemplatePath = _path.default.join(basedir, 'templates', 'api');
  const templateDirectories = _fs.default.readdirSync(apiBaseTemplatePath);
  const filesRecord = (0, _reduce.default)(templateDirectories).call(templateDirectories, (acc, dir) => {
    var _context, _context2;
    const templateFiles = _fs.default.readdirSync(_path.default.join(apiBaseTemplatePath, dir));
    const filePaths = (0, _map.default)(_context = (0, _map.default)(_context2 = (0, _filter.default)(templateFiles).call(templateFiles, fileName => {
      const fileNameParts = fileName.split('.');
      // Remove all webAuthn files. We'll handle those in the next step
      return fileNameParts.length <= 3 || (0, _at.default)(fileNameParts).call(fileNameParts, -3) !== 'webAuthn';
    })).call(_context2, fileName => {
      var _context3, _context4, _context5;
      // remove "template" from the end, and change from {ts,tsx} to js for
      // JavaScript projects
      const fileNameParts = fileName.split('.');
      const outputFileName = [...(0, _slice.default)(fileNameParts).call(fileNameParts, 0, -2), (0, _project.isTypeScriptProject)() ? (0, _at.default)(fileNameParts).call(fileNameParts, -2) : 'js'].join('.');
      if (!webAuthn) {
        return {
          templateFileName: fileName,
          outputFileName
        };
      }

      // Insert "webAuthn." before the second to last part
      const webAuthnFileName = (0, _reverse.default)(_context3 = (0, _map.default)(_context4 = (0, _reverse.default)(_context5 = fileName.split('.')).call(_context5)).call(_context4, (part, i) => i === 1 ? 'webAuthn.' + part : part)).call(_context3).join('.');

      // Favor the abc.xyz.webAuthn.ts.template file if it exists, otherwise
      // just go with the "normal" filename
      if ((0, _includes.default)(templateFiles).call(templateFiles, webAuthnFileName)) {
        return {
          templateFileName: webAuthnFileName,
          outputFileName
        };
      } else {
        return {
          templateFileName: fileName,
          outputFileName
        };
      }
    })).call(_context, f => {
      const templateFilePath = _path.default.join(apiBaseTemplatePath, dir, f.templateFileName);
      const outputFilePath = _path.default.join(apiSrcPath, dir, f.outputFileName);
      return {
        templateFilePath,
        outputFilePath
      };
    });
    (0, _forEach.default)(filePaths).call(filePaths, paths => {
      const content = _fs.default.readFileSync(paths.templateFilePath, 'utf8');
      acc = {
        ...acc,
        [paths.outputFilePath]: (0, _project.isTypeScriptProject)() ? content : (0, _lib.transformTSToJS)(paths.outputFilePath, content)
      };
    });
    return acc;
  }, {});
  return filesRecord;
};

/**
 * Loops through the keys in `filesRecord` and generates unique file paths if
 * they conflict with existing files
 *
 * Given this input:
 * ```json
 * {
 *   "/Users/tobbe/dev/rw-app/api/src/lib/auth.ts": "<file content>",
 *   "/Users/tobbe/dev/rw-app/api/src/lib/helperFunctions.ts": "<file content>",
 *   "/Users/tobbe/dev/rw-app/api/src/lib/supertokens.ts": "<file content>",
 *   "/Users/tobbe/dev/rw-app/api/src/functions/auth.ts": "<file content>"
 * }
 * ```
 *
 * You could get this output, depending on what existing files there are
 * ```json
 * {
 *   "/Users/tobbe/dev/rw-app/api/src/lib/supertokensAuth3.ts": "<file content>",
 *   "/Users/tobbe/dev/rw-app/api/src/lib/supertokensHelperFunctions.ts": "<file content>",
 *   "/Users/tobbe/dev/rw-app/api/src/lib/supertokens2.ts": "<file content>",
 *   "/Users/tobbe/dev/rw-app/api/src/functions/auth.ts": "<file content>"
 * }
 * ```
 */
exports.apiSideFiles = apiSideFiles;
function generateUniqueFileNames(filesRecord, provider) {
  var _context6;
  const newFilesRecord = {};
  (0, _forEach.default)(_context6 = (0, _keys.default)(filesRecord)).call(_context6, fullPath => {
    let newFullPath = fullPath;
    let i = 1;
    while (_fs.default.existsSync(newFullPath)) {
      const nameParts = _path.default.basename(fullPath).split('.');
      if (nameParts[0] === provider) {
        // api/lib/supertokens.ts -> api/lib/supertokens2.ts

        const newFileName = provider + (i + 1) + '.' + (0, _slice.default)(nameParts).call(nameParts, 1).join('.');
        newFullPath = _path.default.join(_path.default.dirname(fullPath), newFileName);
      } else {
        // api/lib/auth.ts -> api/lib/supertokensAuth.ts
        // (potentially) -> api/lib/supertokensAuth2.ts depending on what
        // files already exists
        const count = i > 1 ? i : '';
        const newFileName = provider + (0, _pascalcase.default)(nameParts[0]) + count + '.' + (0, _slice.default)(nameParts).call(nameParts, 1).join('.');
        newFullPath = _path.default.join(_path.default.dirname(fullPath), newFileName);
      }
      i++;
    }
    newFilesRecord[newFullPath] = filesRecord[fullPath];
  });
  return newFilesRecord;
}