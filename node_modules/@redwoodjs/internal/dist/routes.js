"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.getDuplicateRoutes = getDuplicateRoutes;
exports.warningForDuplicateRoutes = warningForDuplicateRoutes;
require("core-js/modules/es.array.push.js");
var _set = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/set"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));
var _trimEnd = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/trim-end"));
var _chalk = _interopRequireDefault(require("chalk"));
var _projectConfig = require("@redwoodjs/project-config");
// Circular dependency when trying to use the standard import
const {
  getProject
} = require('@redwoodjs/structure/dist/index');
const {
  RWRoute
} = require('@redwoodjs/structure/dist/model/RWRoute');
/**
 * Returns an array of routes which conflict on their defined names
 */
function getDuplicateRoutes() {
  var _context;
  const duplicateRoutes = [];
  const allRoutes = getProject((0, _projectConfig.getPaths)().base).router.routes;
  const uniqueNames = new _set.default((0, _map.default)(_context = (0, _filter.default)(allRoutes).call(allRoutes, route => route.name !== undefined)).call(_context, route => route.name));
  (0, _forEach.default)(uniqueNames).call(uniqueNames, name => {
    const routesWithName = (0, _filter.default)(allRoutes).call(allRoutes, route => {
      return route.name === name;
    });
    if (routesWithName.length > 1) {
      duplicateRoutes.push(...(0, _map.default)(routesWithName).call(routesWithName, route => {
        return {
          name: route.name,
          page: route.page_identifier_str,
          path: route.path
        };
      }));
    }
  });
  return duplicateRoutes;
}

/**
 * Detects any potential duplicate routes and returns a formatted warning message
 * @see {@link getDuplicateRoutes} for how duplicate routes are detected
 * @return {string} Warning message when duplicate routes found, empty string if not
 */
function warningForDuplicateRoutes() {
  const duplicatedRoutes = getDuplicateRoutes();
  let message = '';
  if (duplicatedRoutes.length > 0) {
    message += _chalk.default.keyword('orange')(`Warning: ${duplicatedRoutes.length} duplicate routes have been detected, only the route(s) closest to the top of the file will be used.\n`);
    (0, _forEach.default)(duplicatedRoutes).call(duplicatedRoutes, route => {
      message += ` ${_chalk.default.keyword('orange')('->')} Name: "${route.name}", Path: "${route.path}", Page: "${route.page}"\n`;
    });
  }
  return (0, _trimEnd.default)(message).call(message);
}