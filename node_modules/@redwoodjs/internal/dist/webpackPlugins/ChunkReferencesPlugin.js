"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.ChunkReferencesPlugin = void 0;
require("core-js/modules/es.array.push.js");
var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));
var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));
var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/array/from"));
var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/filter"));
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));
class ChunkReferencesPlugin {
  constructor(options = {}) {
    this.options = void 0;
    this.options = {
      ...ChunkReferencesPlugin.defaultOptions,
      ...options
    };
  }
  apply(compiler) {
    compiler.hooks.emit.tap('ChunkReferencesPlugin', compilation => {
      var _context;
      const output = [];
      (0, _forEach.default)(_context = compilation.chunks).call(_context, chunk => {
        if (chunk.id) {
          var _context2, _context3, _context4;
          output.push({
            name: chunk.name,
            id: chunk.id,
            files: (0, _map.default)(_context2 = (0, _from.default)(chunk.files)).call(_context2, f => '/' + f),
            referencedChunks: (0, _map.default)(_context3 = (0, _filter.default)(_context4 = (0, _from.default)(chunk.getAllReferencedChunks())).call(_context4, c => {
              return !!c.id && c.id !== chunk.id;
            })).call(_context3, referencedChunk => referencedChunk.id)
          });
        }
      });
      compilation.emitAsset(this.options.outputFile, new compiler.webpack.sources.RawSource((0, _stringify.default)(output, null, 2)));
    });
  }
}
exports.ChunkReferencesPlugin = ChunkReferencesPlugin;
ChunkReferencesPlugin.defaultOptions = {
  outputFile: 'chunk-references.json'
};