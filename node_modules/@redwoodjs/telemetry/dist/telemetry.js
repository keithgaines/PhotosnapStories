"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.timedTelemetry = exports.telemetryMiddleware = exports.errorTelemetry = void 0;
var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));
var _child_process = require("child_process");
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var _projectConfig = require("@redwoodjs/project-config");
const spawnProcess = (...args) => {
  // "os.type()" returns 'Windows_NT' on Windows. See https://nodejs.org/docs/latest-v12.x/api/os.html#os_os_type.
  const execPath = _os.default.type() === 'Windows_NT' ? `"${process.execPath}"` : process.execPath;
  const spawnOptions = _os.default.type() === 'Windows_NT' ? {
    stdio: process.env.REDWOOD_VERBOSE_TELEMETRY ? ['ignore', 'inherit', 'inherit'] : 'ignore',
    // The following options run the process in the background without a console window, even though they don't look like they would.
    // See https://github.com/nodejs/node/issues/21825#issuecomment-503766781 for information
    detached: false,
    windowsHide: false,
    shell: true
  } : {
    stdio: process.env.REDWOOD_VERBOSE_TELEMETRY ? ['ignore', 'inherit', 'inherit'] : 'ignore',
    detached: process.env.REDWOOD_VERBOSE_TELEMETRY ? false : true,
    windowsHide: true
  };
  (0, _child_process.spawn)(execPath, [_path.default.join(__dirname, 'scripts', 'invoke.js'), ...args, '--root', (0, _projectConfig.getPaths)().base], spawnOptions).unref();
};

// wrap a function in this call to get a telemetry hit including how long it took
const timedTelemetry = async (argv, options, func) => {
  if (process.env.REDWOOD_DISABLE_TELEMETRY) {
    return func.call(void 0);
  }
  const start = new Date();
  const result = await func.call(void 0);
  const duration = new Date().getTime() - start.getTime();
  spawnProcess('--argv', (0, _stringify.default)(argv), '--duration', duration.toString(), '--type', (0, _stringify.default)(options.type));
  return result;
};
exports.timedTelemetry = timedTelemetry;
const errorTelemetry = async (argv, error) => {
  if (process.env.REDWOOD_DISABLE_TELEMETRY) {
    return;
  }
  spawnProcess('--argv', (0, _stringify.default)(argv), '--error', (0, _stringify.default)(error));
};

// used as yargs middleware when any command is invoked
exports.errorTelemetry = errorTelemetry;
const telemetryMiddleware = async () => {
  if (process.env.REDWOOD_DISABLE_TELEMETRY) {
    return;
  }
  spawnProcess('--argv', (0, _stringify.default)(process.argv));
};
exports.telemetryMiddleware = telemetryMiddleware;